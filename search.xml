<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编程学习</title>
      <link href="/2024/03/17/%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98/"/>
      <url>/2024/03/17/%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="一-C"><a href="#一-C" class="headerlink" title="一. C++"></a>一. C++</h1><h2 id="1-回调函数"><a href="#1-回调函数" class="headerlink" title="1. 回调函数"></a>1. 回调函数</h2><p>C++回调函数是一种可以在程序执行时动态绑定，被其他函数调用的函数。它通过将一个函数指针传递给另一个函数，使得后者可以在需要时直接调用前者。</p><p>通常情况下，回调函数包括两个部分：回调函数本身和被调函数。被调函数在执行过程中遇到某些条件会执行回调函数，并将参数传递给回调函数，以便回调函数进行进一步的处理。</p><p>C++回调函数经常在通信模块中使用，因为通信模块需要与其他模块进行交互，并根据相应的事件和数据执行相应的操作。例如，在网络编程中，当某个事件（如连接建立完成、数据接收完毕等）发生时，就需要执行相应的回调函数来处理数据或发送信号。在GUI开发中，也常常使用回调函数来响应用户界面上的操作，如鼠标点击、键盘输入等。</p><p>在通信模块中使用回调函数的好处在于，它可以使代码具有更好的灵活性和可重用性。通过使用回调函数，我们可以实现不同模块之间的解耦，使得不同的模块可以独立发展，减少了模块之间的耦合关系，并且可以更方便地进行单元测试和调试。</p><p>总之，C++回调函数是一种重要的编程技术，它可以使程序更加灵活，可复用性更高，在通信模块、GUI开发和其他需要动态绑定的场景中都有广泛的应用。</p><p>下面是一个简单的C++回调函数的示例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义回调函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*CallbackFunc)</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被调函数，接收一个回调函数作为参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doSomething</span><span class="params">(<span class="type">int</span> value, CallbackFunc callback)</span> </span>&#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;doSomething: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行回调函数</span></span><br><span class="line">  <span class="keyword">if</span> (callback != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="built_in">callback</span>(value + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数，处理被调函数传递过来的参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">onCallback</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;onCallback: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 使用回调函数调用被调函数</span></span><br><span class="line">  <span class="built_in">doSomething</span>(<span class="number">10</span>, onCallback);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码中，我们定义了一个名为 <code>CallbackFunc</code> 的函数指针类型，它接收一个整数参数并返回空。然后我们编写了两个函数：<code>doSomething</code> 和 <code>onCallback</code>。其中，<code>doSomething</code> 是被调函数，它接受一个整数 <code>value</code> 和一个回调函数 <code>callback</code> 作为参数。<code>onCallback</code> 则是我们定义的回调函数，它接收一个整数 <code>value</code> 作为参数，并在控制台输出。</p><p>在主函数中，我们通过调用 <code>doSomething(10, onCallback)</code>，向 <code>doSomething</code> 函数传递了 <code>10</code> 这个整数和回调函数 <code>onCallback</code>。在 <code>doSomething</code> 中，当执行到回调函数的时候，会将传递进来的 <code>value</code> 参数加 1，并执行回调函数 <code>onCallback</code>。在 <code>onCallback</code> 中，我们再次输出了这个参数的值。</p><p>这个示例展示了如何使用 C++ 回调函数来实现程序中的动态绑定和事件响应操作。</p><h2 id="2-new对象和直接创建对象"><a href="#2-new对象和直接创建对象" class="headerlink" title="2. new对象和直接创建对象"></a>2. new对象和直接创建对象</h2><p>这两个构造方法的区别在于对象的创建方式和生命周期。</p><ol><li><code>recv_worker = new Worker(&quot;receiver&quot;);</code></li></ol><p>这行代码使用了动态内存分配，通过<code>new</code>运算符在堆上创建了一个名为<code>recv_worker</code>的<code>Worker</code>对象。这样创建的对象的生命周期由手动管理，需要<strong>手动调用<code>delete</code>来释放对应的内存空间</strong>，否则会导致内存泄漏。</p><ol start="2"><li><code>Worker main_work(&quot;main&quot;);</code></li></ol><p>这行代码通过直接创建一个名为<code>main_work</code>的<code>Worker</code>对象，不使用动态内存分配。这样创建的对象的生命周期由其所在的作用域管理，当超出该作用域时，对象会自动被销毁并释放相应的内存空间。</p><p>选择使用动态内存分配的方式（<code>new</code>运算符）通常是在以下情况下考虑：</p><ul><li>对象的生命周期需要跨越多个函数或作用域。</li><li>对象的大小较大，无法容纳在栈上。</li><li>需要在程序的其他地方继续访问对象。</li></ul><p>在使用动态内存分配时，需要注意手动释放分配的内存空间，以避免内存泄漏。但同时也增加了手动管理内存的复杂性。</p><p>使用直接创建对象的方式更简洁，并且在对象生命周期比较短暂且作用域有限的情况下更为常见和方便。</p><p>具体选择哪种方式构造对象取决于代码的需求、对象的生命周期以及内存管理的复杂性和性能考虑。</p><h2 id="3-bind函数"><a href="#3-bind函数" class="headerlink" title="3. bind函数"></a>3. bind函数</h2><p><code>std::bind</code> 是 C++ 标准库中的一个函数模板，用于创建函数对象（也称为绑定器），它可以绑定函数、成员函数、函数对象或者函数指针，并通过指定参数来修改绑定后的函数对象的行为。</p><p><code>std::bind</code> 的基本语法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> <span class="title class_">F</span>, <span class="keyword">class</span>... Args &gt;</span><br><span class="line"><span class="comment">/* 返回值类型 */</span> <span class="built_in">bind</span>( F&amp;&amp; f, Args&amp;&amp;... args );</span><br></pre></td></tr></table></figure><p>其中，<code>F</code> 表示要绑定的函数、成员函数、函数对象或函数指针的类型，<code>Args</code> 表示要传递给绑定的函数对象的参数类型。</p><p>使用 <code>std::bind</code> 可以解决以下问题：</p><ol><li><p>绑定普通函数：可以将函数及其参数进行绑定，创建一个函数对象。</p></li><li><p>绑定成员函数：可以将成员函数与特定对象实例进行绑定，创建一个函数对象。</p></li><li><p>参数占位符：可以使用占位符 <code>_n</code> 来表示尚未绑定的参数位置，之后可以在调用时提供这些参数。</p></li><li><p>参数传递和修改：可以在绑定时指定部分参数，绑定后的函数对象在调用时可以提供剩余的参数或者修改已绑定的参数。</p></li></ol><p>下面是一些常见用法的示例：</p><ol><li>绑定普通函数：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> boundFunc = std::<span class="built_in">bind</span>(add, <span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">boundFunc</span>() &lt;&lt; std::endl;  <span class="comment">// 输出 15</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>绑定成员函数：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj;</span><br><span class="line">    <span class="keyword">auto</span> boundFunc = std::<span class="built_in">bind</span>(&amp;MyClass::multiply, &amp;obj, <span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">boundFunc</span>() &lt;&lt; std::endl;  <span class="comment">// 输出 50</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用占位符和参数传递：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> boundFunc = std::<span class="built_in">bind</span>(add, std::placeholders::_1, <span class="number">10</span>, std::placeholders::_2);</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">boundFunc</span>(<span class="number">5</span>, <span class="number">15</span>) &lt;&lt; std::endl;  <span class="comment">// 输出 30</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用 <code>std::bind</code>，可以更灵活地操作函数对象的行为，包括参数绑定、参数占位符和参数传递。这使得代码更具可读性和重用性，并且在某些情况下可以提供更简洁的编程解决方案。</p><ol><li><p>消息队列：使用一个线程安全的队列数据结构作为消息队列，用于存储待处理的消息。</p></li><li><p>消息生产者：在应用程序的不同部分或模块中，有需要向消息队列发送消息的地方。这些消息可以是需要后台处理的任务、事件或其他通知。</p></li><li><p>消息消费者：一个或多个消费者线程从消息队列中获取消息，并进行处理。每个消费者线程从队列中获取一个消息，并在后台线程中处理或执行相关操作。</p></li><li><p>多线程处理：您的多线程框架可以用来创建和管理消费者线程。这些线程可以并行地处理消息，提高处理速度和吞吐量。</p></li><li><p>异步定时器：您的异步定时器可以用来进行消息的定期处理、延迟处理或重试操作。您可以设置定时器来触发特定的操作，例如定期检查队列中的消息、定时触发后台任务等。</p></li><li><p>错误处理与确认机制：在消息处理过程中，可能会发生错误或需要确认消息已被正确处理。您可以设计错误处理机制，例如记录错误日志或进行错误重试。同时，可以在消息队列中引入确认机制，确保消息被成功处理并从队列中移除。</p></li><li><p>监控和管理：为了监控系统运行情况和管理消息队列，您可以设计一些管理功能，例如查看当前队列长度、消费者线程状态、错误日志等。</p></li></ol><p>当用C++实现一个消息队列处理系统时，可以按照以下设计进行：</p><ol><li>消息队列：使用一个线程安全的队列数据结构来实现消息队列。可以使用标准库提供的<code>std::queue</code>或者第三方库（如Boost）中的线程安全队列。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::queue&lt;Message&gt; messageQueue;</span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br></pre></td></tr></table></figure><ol start="2"><li>消息结构体：定义一个消息结构体，包含需要传递的信息。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="comment">// 消息内容</span></span><br><span class="line">    std::string content;</span><br><span class="line">    <span class="comment">// 其他可能的字段</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>消息生产者：在需要发送消息的地方，调用一个函数将消息推送到消息队列。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushMessage</span><span class="params">(<span class="type">const</span> Message&amp; message)</span> </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">    messageQueue.<span class="built_in">push</span>(message);</span><br><span class="line">    cv.<span class="built_in">notify_one</span>();  <span class="comment">// 通知一个等待的消费者线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>消息消费者：创建多个消费者线程，从消息队列中获取消息，并进行处理。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">consumerThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        cv.<span class="built_in">wait</span>(lock, []&#123; <span class="keyword">return</span> !messageQueue.<span class="built_in">empty</span>(); &#125;);  <span class="comment">// 等待队列非空</span></span><br><span class="line">        Message message = messageQueue.<span class="built_in">front</span>();</span><br><span class="line">        messageQueue.<span class="built_in">pop</span>();</span><br><span class="line">        lock.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">processMessage</span>(message);  <span class="comment">// 处理消息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>多线程处理：在主函数中创建并启动多个消费者线程。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;std::thread&gt; consumerThreads;</span><br><span class="line">    <span class="type">int</span> numThreads = <span class="number">4</span>; <span class="comment">// 设置消费者线程数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numThreads; ++i) &#123;</span><br><span class="line">        consumerThreads.<span class="built_in">emplace_back</span>(consumerThread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行其他操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; thread : consumerThreads) &#123;</span><br><span class="line">        thread.<span class="built_in">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>错误处理与确认机制：根据需要，在<code>processMessage()</code>函数中添加错误处理逻辑，并确保消息被成功处理后从队列中移除。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">processMessage</span><span class="params">(<span class="type">const</span> Message&amp; message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理消息的逻辑</span></span><br><span class="line">    &#125; <span class="built_in">catch</span> (<span class="type">const</span> std::exception&amp; e) &#123;</span><br><span class="line">        <span class="comment">// 处理错误的逻辑，并记录错误日志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>监控和管理：根据需求，可以添加相关功能，如查看队列长度的函数、查询消费者线程状态等。</li></ol><p>当你运行此代码时，它会执行以下步骤：</p><ol><li><p>创建 <code>oneshot_timer</code> 和 <code>re_timer</code> 对象，并将它们附加到 <code>send_worker</code> 工作线程上。</p></li><li><p>创建 <code>recv_worker</code> 接收线程，并启动该线程。这个线程将处理从 <code>send_worker</code> 发送过来的任务。</p></li><li><p>调用 <code>re_timer-&gt;start(5000)</code>，表示重复定时器 <code>re_timer</code> 将在5000毫秒（5秒）后开始触发，然后每隔5000毫秒再触发一次。</p></li><li><p>调用 <code>oneshot_timer-&gt;start(3000)</code>，表示一次性定时器 <code>oneshot_timer</code> 将在3000毫秒（3秒）后触发一次。</p></li><li><p><code>send_worker-&gt;start(WORKER_FOREGROUND)</code> 启动 <code>send_worker</code> 工作线程。</p></li><li><p>一旦定时器触发，就会调用相应的回调函数。</p><ul><li><p>当 <code>oneshot_timer</code> 触发时，将调用 <code>once_timer</code> 回调函数。在这个函数中，它会递增一个变量 <code>iter</code>，并使用 <code>iter * 10000</code> 的值重新启动 <code>oneshot_timer</code>。这样，每次 <code>oneshot_timer</code> 触发时，都会以递增的时间间隔重新启动。</p></li><li><p>当 <code>re_timer</code> 触发时，将调用 <code>repeat_timer</code> 回调函数。在这个函数中，它会创建一个 <code>Job</code> 对象，并根据 <code>sync</code> 变量的值选择以同步或异步方式将任务提交给接收线程。如果 <code>sync</code> 为真，则使用 <code>recv_worker-&gt;submitSync</code> 方法提交任务，否则使用 <code>recv_worker-&gt;submitAsync</code> 方法提交任务。</p></li></ul></li><li><p>在 <code>repeat_timer</code> 回调函数中，当 <code>sync</code> 为真时，还创建了一个 <code>TestJob</code> 对象，并将 <code>testa</code> 的值传递给它。然后，通过 <code>recv_worker-&gt;submitSync</code> 方法将 <code>TestJob</code> 提交到接收线程。最后，打印出 <code>testa</code> 的值。</p></li></ol><p>总结起来，这段代码创建了两个定时器（一个一次性定时器和一个重复定时器），并设置了它们的触发时间。定时器触发时，会调用相应的回调函数，在回调函数中执行特定的操作，如重新启动定时器、创建任务并将其提交给接收线程等。</p><p>希望这解释了代码的逻辑。如果还有其他问题，请随时提问。</p><h2 id="4-子类重写父类虚函数"><a href="#4-子类重写父类虚函数" class="headerlink" title="4. 子类重写父类虚函数"></a>4. 子类重写父类虚函数</h2><p>在C++中，一个类可以从另一个类继承，这个被继承的类称为基类（或父类），而继承这个基类的类称为派生类（或子类）。当子类从父类继承时，它可以访问所有父类公共和保护的成员。如果需要在子类中修改或扩展父类的行为，就可以重写父类的虚函数。</p><p>重写父类虚函数可以提供更多的灵活性和可扩展性。为了重写父类的虚函数，需要遵循以下步骤：</p><ol><li>创建一个与父类虚函数声明相同的函数，在子类中声明该函数为 <code>virtual</code> 类型，并使用 <code>override</code> 关键字标记该函数。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> : <span class="keyword">public</span> Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>在子类中重新实现该函数的功能。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> : <span class="keyword">public</span> Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在这里实现子类需要的新功能</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>如果需要，在子类中可以通过调用父类的虚函数来扩展或修改父类函数的行为。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> : <span class="keyword">public</span> Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行父类的行为</span></span><br><span class="line">        Parent::<span class="built_in">foo</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在这里添加子类需要的新功能</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这就是在C++中重写父类虚函数的基本步骤。通过这种方式，你可以实现在子类中扩展和修改父类的行为，从而提供更灵活、可扩展的代码结构。</p><h2 id="5-全局变量和静态变量"><a href="#5-全局变量和静态变量" class="headerlink" title="5. 全局变量和静态变量"></a>5. 全局变量和静态变量</h2><p>全局变量和静态变量在内存中存放在同一位置，即静态区&#x2F;全局区。</p><p>静态区&#x2F;全局区分为两个部分，一部分存放已初始化的变量，另一部分存储未初始化的变量</p><p>对基本类型的静态变量若在声明时未赋以初值，则系统自动赋予0值。</p><p>从作用域来看：</p><p>静态变量的生命周期为整个源程序，其作用域仍与普通变量相同</p><p>静态全局变量也具有全局作用域，他与全局变量的区别在于如果程序包含多个文件的话，他作用于定义它的文件里，不能作用到其他文件里，即被static关键字修饰过的变量具有文件作用域。这样即使两个不同的源文件都定义了相同的静态全局变量，他们也是不同的变量</p><p>从分配内存空间看：</p><p>全局变量、静态局部变量、静态全局变量都在静态存储区分配空间，而局部变量在栈分配空间。</p><p>从生命周期看： 都在程序运行时期全程有效</p><h2 id="左移-右移运算符"><a href="#左移-右移运算符" class="headerlink" title="左移&#x2F;右移运算符"></a>左移&#x2F;右移运算符</h2><p>当我们进行右移运算时，将一个二进制数向右移动指定位数的位置。举个例子来说明：</p><p>假设我们有一个无符号8位整数<code>a</code>，其二进制表示为 <code>10111010</code>，我们将其向右移动2位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   a: 10111010</span><br><span class="line">&gt;&gt; 2</span><br></pre></td></tr></table></figure><p>右移2位后，最右边的两位将被舍弃，而左侧的位则向右移动填补。</p><p>结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00101110</span><br></pre></td></tr></table></figure><p>这个新的二进制数对应的十进制值为46。</p><p>在右移运算中，被移出的位会被丢弃，而新增的位会用0来填充。如果进行的是算术右移（对于有符号整数），则符号位会保持不变，即用符号位填充新增的位，以保持数值的符号。</p><p>例如，在进行算术右移时，如果我们有一个有符号8位整数<code>b</code>，其二进制表示为 <code>11100101</code>，我们将其向右移动3位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   b: 11100101</span><br><span class="line">&gt;&gt; 3</span><br></pre></td></tr></table></figure><p>由于是算术右移，符号位为1，因此新增的位将使用1来填充。</p><p>结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11111100</span><br></pre></td></tr></table></figure><p>这个新的二进制数对应的十进制值为-4。</p><p>总结一下，右移运算是将二进制数向右移动指定的位数，并用0填充新增的位（对于无符号整数），或者用符号位填充新增的位（对于有符号整数）。</p><h2 id="QNX栈内存分配"><a href="#QNX栈内存分配" class="headerlink" title="QNX栈内存分配"></a>QNX栈内存分配</h2><h2 id="extern-“C”"><a href="#extern-“C”" class="headerlink" title="extern “C”"></a>extern “C”</h2><h3 id="一-extern关键字"><a href="#一-extern关键字" class="headerlink" title="一. extern关键字"></a>一. <a href="https://so.csdn.net/so/search?q=extern&spm=1001.2101.3001.7020">extern</a>关键字</h3><p><code>extern</code> 关键字的用法很简单，就是简简单单的声明，它可以明确的指出一个语句是声明；<br>比如<code>extern int i</code>;那么就说明 这是声明变量 i,而不是定义i,<strong>声明是不开辟内存的，定义是开辟内存的</strong>。<br>假如<code>int i</code>；没有<code>extern</code>修饰，那就说明为定义，会分配内存空间的。</p><h4 id="extern-的使用场景"><a href="#extern-的使用场景" class="headerlink" title="extern 的使用场景"></a>extern 的使用场景</h4><p>假如我一个大工程，这个工程由超级多的文件，这些文件假如都要访问<br>test.c文件的 变量 i,那么，只能在这些文件中，每个文件的开头都 声明变量 i,并且，假如我的test.c，不止一个定义一个变量i,有好多其他变量呢？在其他文件访问时候，都要声明好多变量，这会使得书写难度很繁琐，并且维护成本也大；</p><p>所以一般，我们都把声明语句放到头文件使用，即我定义一个test.h的头文件；<br>在该头文件中，声明 extern int i；<br>然后，假如你在其他文件要使用改变量i,直接包含该头文件即可，<br>比如：test.h 头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.h 头文件</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> j;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> k;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//声明很多很多变量</span></span><br></pre></td></tr></table></figure><p>在其他.c文件，只要包含该头文件，就可以啦，比如在<code>main.c</code>文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="comment">//extern int i; 不用写了</span></span><br><span class="line"><span class="comment">//extern int j;不用写了</span></span><br><span class="line"><span class="comment">//extern int k;不用写了</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//声明很多很多变量,都不用写了，因为包含了头文件，声明都在头文件中</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>,i,j,k);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="extern的用法总结"><a href="#extern的用法总结" class="headerlink" title="extern的用法总结"></a>extern的用法总结</h4><p>extern一般用于声明，在.h文件中，声明变量或者函数（函数可以不加extern，但是最好加上，这样比较统一）；在其他文件要访问该变量函数时候，包含头文件就行哦。</p><h3 id="二-extern-“C”-的理解和用法"><a href="#二-extern-“C”-的理解和用法" class="headerlink" title="二. extern “C” 的理解和用法"></a>二. extern “C” 的理解和用法</h3><p>在C++中，extern”C”修饰的语句是按照C语言的方式进行编译的。</p><p>怎么理解这句话呢？</p><p>我来举几个例子：（理解它extern”C”的含义）<br>我们知道在C++中函数是可以发生重载的，即编译的时候并不会报错,在C语言中，是没有重载的说法的;那么假如我用extern”C”去修饰重载的函数的话，即在编译时候，就会按照C语言的方式去编译了：<br>这个时候，就会发生错误；<br>看例子：创建一个main.cpp文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> <span class="comment">//用 extern&quot;C&quot;修饰</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> v)</span><span class="comment">//用 extern&quot;C&quot;修饰</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统一诊断服务（UDS）</title>
      <link href="/2024/03/17/%E7%BB%9F%E4%B8%80%E8%AF%8A%E6%96%AD%E6%9C%8D%E5%8A%A1%EF%BC%88UDS%EF%BC%89/"/>
      <url>/2024/03/17/%E7%BB%9F%E4%B8%80%E8%AF%8A%E6%96%AD%E6%9C%8D%E5%8A%A1%EF%BC%88UDS%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>诊断服务常用于诊断仪（客户端）和<a href="https://so.csdn.net/so/search?q=ECU&spm=1001.2101.3001.7020">ECU</a>（服务器）之间的会话控制、安全访问、例程控制、DTC读取，ECU软件刷写（软件下载）等</p><p><img src="https://s2.loli.net/2024/03/17/jaImN1PkDbxwR7L.png" alt="Pasted image 20230919090838.png"><br>![[Pasted image 20230919090838.png]]</p><p>![[Pasted image 20230919132051.png]]</p><p>![[Pasted image 20230919094110.png]]</p><h1 id="一-诊断术语"><a href="#一-诊断术语" class="headerlink" title="一. 诊断术语"></a>一. 诊断术语</h1><p><strong>Diagnostic Service （诊断服务）</strong></p><blockquote><p>诊断服务是介于诊断设备和ECU之间的一种信息交互方式。通常由诊断设备发出请求，ECU做出回应。</p></blockquote><p><strong>Diagnostic Trouble Code （故障码）</strong></p><blockquote><p>故障码是用来标记ECU故障的代码，它遵循一定的规则，存储在ECU的非易失性存储中。</p></blockquote><p><strong>Diagnostic Data （诊断数据）</strong></p><blockquote><p>诊断数据是可以被诊断设备请求的ECU内部数据，它包括：<br>    - 当前数据：ECU正在运行的数据，比如车速、节气门开度，发动机转速等；<br>    - 存储数据：被ECU存储在存储器中某时刻的数据，比如DTC；<br>    - 静态数据：恒定不变的ECU内部数据，比如VIN码。</p></blockquote><p><strong>Diagnostic Session （诊断会话）</strong></p><blockquote><p>可以理解为某种诊断模式或权限，即在不同的模式下，对不同的诊断服务的使用做了限制。</p></blockquote><p><strong>Diagnostic Routine （诊断例程）</strong></p><blockquote><p>驻留在被诊断ECU中的子程序，它可以被诊断设备启动和停止。比如格式化EEPROM的子程序。</p></blockquote><p><strong>Addressing Type （寻址方式）</strong></p><blockquote><p>寻址方式指的是诊断消息的传递方式，有两种寻址方式：</p><ul><li>物理寻址，即1对1通信，用于知道确切的被诊断ECU的地址；</li><li>功能寻址，即1对n通信，或者说<strong>广播</strong>发送，用于不知道确切的被诊断的ECU的地址，向一组或者全体ECU发送请求；![[Pasted image 20230919093318.png]]<br>地址概念：<br> -源地址：发送节点地址<br> -目标地址：接收节点地址<br> ![[Pasted image 20230919093709.png]]</li></ul></blockquote><p><strong>Response（响应）</strong></p><blockquote><p>tester请求诊断服务执行后，从ECU的返回结果。可以有两种结果：</p><ul><li>Positive Response，<strong>正响应</strong>，即诊断请求执行成功；</li><li>Negative Response，<strong>负响应</strong>，即诊断请求执行失败；</li></ul></blockquote><hr><p><strong>Service Identifier</strong> (SID) </p><blockquote><p>Service Identifier，诊断服务标识符，简称为SID，一字节的无符号整数，用来指代某个诊断服务。诊断协议为每个诊断服务都分配唯一SID，因此更方便协议的软件实现。同时，在开发过程中沟通更加方便。比如，ReadDataByIdentifier服务是去按照ID去读诊断数据，直接说22服务会更加便捷。</p></blockquote><ul><li>SID：Service Identifier，<strong>诊断服务ID</strong>。UDS本质上是一种定向的通信，是一种交互协议（Request&#x2F;Response），即诊断方给ECU发送指定的请求数据（Request），这条数据中需要包含SID。</li><li>如果是肯定的响应（<strong>Positive Response</strong>），回复<code>[SID+0x40]</code>，如请求10，响应50；请求22，响应62。</li><li>如果是否定的响应（<strong>Negative Response</strong>），回复<strong>7F+SID+NRC</strong>，回复的是一个声明。</li></ul><hr><p><strong>Data Identifier</strong></p><blockquote><p>数据标识符，简称DID，2个字节无符号整数的ID，用来标识ECU中存储的某个诊断数据单元。它的好处是当要读取某个单元的诊断数据时，只要读对应的DID就可以，不必知道数据的具体地址。即使当ECU中的数据地址发生变化时，改变DID和地址单元的映射关系即可，对于使用者来说DID屏蔽了具体实现细节，而将重点放在了数据本身。</p></blockquote><p><strong>Negative Response Code</strong></p><blockquote><p>可以简称为NRC，或者叫负响应码，是一个字节的无符号整数。它是诊断协议为每种执行失败的诊断服务分配的失败原因代号。</p></blockquote><p><strong>Sub-function</strong></p><blockquote><p>有些诊断服务可以支持不同的诊断子服务，sub-function就是用来定义这种子服务的，它将某一个服务细分为更为具体的服务，是一个字节的无符号整数。比如ECU Reset这个服务就有0x01，0x02，0x03等sub-function指代具体的reset方式。</p></blockquote><h1 id="二-UDS报文解读"><a href="#二-UDS报文解读" class="headerlink" title="二. UDS报文解读"></a>二. UDS报文解读</h1><h3 id="常用服务介绍"><a href="#常用服务介绍" class="headerlink" title="常用服务介绍"></a>常用服务介绍</h3><p>UDS的26种服务中，有7种很重要。它们分别是：</p><ul><li>$10 Diagnostic Session Control（诊断会话），</li><li>$14 Clear Diagnostic Information（清除诊断信息），</li><li>$19 Read DTC Information，</li><li>$22 Read Data By Identifier（通过ID读数据），</li><li>$27 Security Access（安全访问），</li><li>$2E Write Data By Identifier（通过ID写数据），</li><li>$3E Tester Present（待机握手）。</li></ul><p>![[Pasted image 20230922141323.png]]</p><hr><h4 id="10诊断会话"><a href="#10诊断会话" class="headerlink" title="$10诊断会话"></a>$10诊断会话</h4><p>$10包含3个子功能，</p><blockquote><ul><li>01 Default，</li><li>02 Programming，</li><li>03 Extended，</li></ul></blockquote><p><strong>ECU上电时，进入的是默认会话（Default）。如果您进入了一个非默认会话的状态，一个定时器会运转，如果一段时间内没有请求，那么到时间后，诊断退回到默认会话01</strong>。当然，我们有一个$3E的服务，可以使诊断保持在非默认的状态。</p><p><strong>报文包含4种类型</strong>，即</p><blockquote><ul><li>SID，</li><li>SID+SF（Sub-function），</li><li>SID+DID（Data Identifier）（读写用），</li><li>SID+SF+DID。</li></ul></blockquote><p>**NRC：Negative Response Code（否定响应码)**。如果ECU拒绝了一个请求，它会回应一个NRC。不同的NRC有不同的含义。</p><p>![[Pasted image 20230922141541.png]]</p><p>例子：以CAN总线网络举例。</p><p><strong>八个数据字节，第一字节被网络层占用</strong>。</p><ul><li>请求（Request）:</li></ul><blockquote><p>02 10 02 xx xx xx xx xx</p></blockquote><p>02中的0代表网络层单帧SF，2代表 数据域有2个字节；<strong>10是SID，02是子功能</strong>。</p><ul><li>肯定响应:</li></ul><blockquote><p>02 50 02 xx xx xx xx xx</p></blockquote><p>02同上，10+40表示对SID的肯定回复，02是子功能。</p><ul><li>否定响应:</li></ul><blockquote><p>03 7F 10 22 xx xx xx xx；</p></blockquote><p>03同上，7F表示否定响应，10是SID，22是NRC。</p><h4 id="3E待机握手"><a href="#3E待机握手" class="headerlink" title="$3E待机握手"></a>$3E待机握手</h4><p>$3E服务用于向服务器指示诊断仪仍然连接在网络上，之前已经激活的诊断服务功能可以仍然保持激活状态。</p><p>例子：</p><blockquote><p>02 3E 80 00 00 00 00 00，发送一个3E服务的报文，保持非默认会话状态。80表示无需回复。</p></blockquote><h4 id="27安全访问"><a href="#27安全访问" class="headerlink" title="$27安全访问"></a>$27安全访问</h4><p>27服务，加上一个子服务，再加上一个钥匙，这样的服务请求可以进行解锁。</p><p>比如下面的例子，2n-1是某个子服务，通过首轮种子的请求，首轮ECU会返回67+01+AA+BB+CC+DD，AA~DD就是种子了。之后第二轮，诊断端会利用种子进行运算（利用整车厂的算法），生成k1（不一定是1个字节），那么发送请求，27+02+[k1]。ECU同样也会通过种子算出k2。当k1和k2匹配时，解锁（Unlocked）成功。</p><ul><li>例子：</li></ul><blockquote><p>Rx： 02 27 05 00 00 00 00 00 安全访问，05子功能<br>Tx： 07 67 05 08 27 11 F0 77 肯定响应，<strong>回复了对应安全级别的种子</strong><br>Rx： 06 27 06 FF FF FF FF 00 <strong>发送密钥</strong>，4个FF。注意06是与05成对使用的。<br>Tx： 03 7F 27 78 00 00 00 00 否定响应，7F+27+NRC<br>Tx： 02 67 06 00 00 00 00 00 肯定响应，通过安全校验</p></blockquote><h4 id="22读数据"><a href="#22读数据" class="headerlink" title="$22读数据"></a>$22读数据</h4><p>$22读数据，<br>Request（请求）：</p><blockquote><p>22+DID（Data Identifier，通常是两个字节）</p></blockquote><p>Response（响应）：</p><blockquote><p>62+DID+Data</p></blockquote><p>DID有一部分已经被ISO 14229-1规定了。比如0xF186就是当前诊断会话数据标识符，0xF187就是车厂备件号数据标识符，0xF188就是车厂ECU软件号码数据ID，0xF189就是车厂ECU软件版本号数据标识符。</p><h4 id="2E写数据"><a href="#2E写数据" class="headerlink" title="$2E写数据"></a>$2E写数据</h4><p>$22写数据，<br>Request（请求）：</p><blockquote><p>2E+DID+Data</p></blockquote><p>Response（响应）：</p><blockquote><p>6E+DID</p></blockquote><p>注意，比如0xF186这个DID不支持直接写入数据，需要用$10来进行会话转换。也就是说，<strong>对于写数据的请求，一般来说需要在一个非默认会话，或解锁的状态下才能进行</strong>。</p><h4 id="19-读DTC"><a href="#19-读DTC" class="headerlink" title="$19 读DTC"></a>$19 读DTC</h4><p>DTC（diagnostic trouble code）：如果系统检测到了一个错误，它将其存储为DTC。DTC可表现为：一个显而易见的故障:通讯信号的丢失（不会使故障灯亮起）；排放相关的故障；安全相关的错误等。DTC可以揭示错误的位置和错误类型。通常DTC占用3个字节，OBD II占用两个字节。</p><p><strong>故障码包括四个大类，分别是PCBU，P是powertrain动力系统，C是Chassis底盘，B是Body车身，U是network通信系统。一个DTC信息占用4个字节。最后一个字节是DTC的状态</strong>。前两个字节是我们熟知的类似P0047的故障码。</p><table><thead><tr><th>DTCHighByte</th><th>DTCMiddleByte</th><th>DTCLowByte</th><th>DTCStatus</th></tr></thead><tbody><tr><td>Byte 1</td><td>Byte 2</td><td>Byte 3</td><td>Byte 4</td></tr></tbody></table><p>$19 拥有28个子服务（Sub-Function）。常用的子服务有02（通过DTC状态掩码读取DTC），04（读取快照信息），06（读取扩展信息），0A（读ECU支持的所有DTC数据）。</p><h4 id="14清除DTC"><a href="#14清除DTC" class="headerlink" title="$14清除DTC"></a>$14清除DTC</h4><p>清除（复位）DTC格式，它可以改变DTC的状态。3个FF代表清除所有DTC。</p><blockquote><p>Request：14+FF+FF+FF；<br>Response：54 。</p></blockquote><hr><h3 id="诊断报文解析"><a href="#诊断报文解析" class="headerlink" title="诊断报文解析"></a>诊断报文解析</h3><p>UDS 的诊断数据的发送与接收都是基于CAN，所以每个数据流都包含基本的CAN Message 的架构</p><blockquote><p>CAN Message &#x3D;CAN ID + CAN DATA</p></blockquote><p>根据上篇UDS文章的叙述，每一个PDU 包含控制信息PCI,数据信息Data.</p><p>![[Pasted image 20230922144315.png]]</p><p>网络层 PDU（协议数据单元）PCI（协议控制信息）格式：具体如下图所示：</p><p>![[Pasted image 20230922144350.png]]</p><p>综上所述，<code>N_PDU =N_PCI+N_DATA</code>, <code>N_PCI</code>的值主要集中的<strong>前三个字节</strong>，<code>N_DATA</code>值主要集中在<strong>后面7位字节</strong>。其中，</p><ul><li><code>SF_DL</code> 代表单帧中数据字节数（取值0-7），</li><li><code>FF_DL</code>代表 连续帧中的数据字节数(12bit可表四8~4095)，</li><li><code>SN</code>代表此帧为连续帧中的第几帧，（0、1、2…E、F、0、1…）</li><li><code>FS</code>流控制帧，有三种状态：继续发送0、保持等待1、数据溢出2</li><li><code>BS</code>规定发送端允许持续传输连续帧数目的最大值（0~255），</li><li><code>STmin</code>限定连续帧相互之间所允许的最小时间间隔。</li></ul><p>先面用连个例子进行说明，请参考！</p><h4 id="例子-1—-单帧的数据传输与接收"><a href="#例子-1—-单帧的数据传输与接收" class="headerlink" title="例子 1— 单帧的数据传输与接收"></a>例子 1— 单帧的数据传输与接收</h4><blockquote><p>数据发送： 02 27 09<br>数据反馈： 03 7F 27 7E —&#x3D;&#x3D;否定的响应&#x3D;&#x3D;（Negative Response），回复&#x3D;&#x3D;7F+SID+NRC&#x3D;&#x3D;，回复的是一个声明</p></blockquote><blockquote><p>数据发送： 02 10 40<br>数据反馈： 06 50 40 00 32 01 F4 —&#x3D;&#x3D;肯定的响应&#x3D;&#x3D;（Positive Response），回复[&#x3D;&#x3D;SID+0x40&#x3D;&#x3D;]，就是请求10，响应40；回复的是一组数据</p></blockquote><p>由于这个数据发送与接收都是单帧传输，所以第一个数据的高四位均为0，四个数据流中的第一个字节的低四位，02，03，02，06代表的为此帧数据含有几个字节，多余的数据位都用 00或者AA行填充。</p><h4 id="例子2-—-多帧的数据接收与传输"><a href="#例子2-—-多帧的数据接收与传输" class="headerlink" title="例子2 — 多帧的数据接收与传输"></a>例子2 — 多帧的数据接收与传输</h4><p>[图片上传失败…(image-b5e84b-1538824826939)]</p><blockquote><p>数据发送：</p><ul><li>06 19 04 00 01 00 00 00</li></ul></blockquote><blockquote><p>数据反馈：</p><ul><li>10 1E 59 04 00 01 00 27</li><li>30 00 00 00 00 00 00 00</li><li>21 00 0B FF FF FF FF FF</li><li>22 FF FF FF FF FF FF FF</li><li>23 FF FF FF FF FF FF FF</li><li>24 FF FF FF AA AA AA AA</li></ul></blockquote><p>数据发送为单帧，所以06代表发送的数据中含有6个字节，</p><p>回复为Positive Response，为连续帧。</p><ul><li>10中的1代表连续帧的首帧，&#x3D;&#x3D;01E代表此连续帧含有30个字节&#x3D;&#x3D;，</li><li>30代表此连续帧的流控制帧，</li><li>21，22，23，24代表连续帧中的第几帧，21代表第一帧，22代表第二帧，依此类推，其中AA为填充位。</li></ul><h2 id="DTC介绍"><a href="#DTC介绍" class="headerlink" title="DTC介绍"></a>DTC介绍</h2><p>![[Pasted image 20240305151213.png]]</p><h3 id="bit-0，testFailed，最近的一次测试是否失败"><a href="#bit-0，testFailed，最近的一次测试是否失败" class="headerlink" title="bit 0，testFailed，最近的一次测试是否失败"></a>bit 0，testFailed，最近的一次测试是否失败</h3><p>0：没有失败，1：失败了</p><p>就是反映最近一次故障检测的结果。</p><p>故障检测是指控制器会在特定时间运行一段程序来检查一下系统的状态（例如：控制器的一个IO口，正常电压范围是5~10V，然后控制器的程序里，每隔一分钟会去读一下这个IO口的电压，如果在正常电压范围内，就算测试通过，反之，测试失败）。有些测试在一个cycle中运行一次，有些测试可能每几十毫秒就运行一次，考虑简单的情况，假设测试是每一分钟运行一次。</p><h3 id="bit-1，testFailedThisOperationCycle，当前循环，故障检测是否失败"><a href="#bit-1，testFailedThisOperationCycle，当前循环，故障检测是否失败" class="headerlink" title="bit 1，testFailedThisOperationCycle，当前循环，故障检测是否失败"></a>bit 1，testFailedThisOperationCycle，当前循环，故障检测是否失败</h3><p>0：没有失败，1：失败了至少一次</p><p>就是记录当前cycle中是否发生过故障检测失败的情况，每次进入新的cycle都会先置0。</p><p>Operation cycle会有不同的设计（例如：1. ECU上下电之间的时间，2. 发动机点火和熄火之间的时间，3. 发动机运行的时间，4. 发动机没有运行的时间），对于一般ECU来说，考虑简单的情况，就取ECU上电和下电之间的时间（如果ECU是个灯，就是开灯和关灯之间的时间）作为一个operation cycle。</p><h3 id="bit-2，pending，是否有待处理的故障"><a href="#bit-2，pending，是否有待处理的故障" class="headerlink" title="bit 2，pending，是否有待处理的故障"></a>bit 2，pending，是否有待处理的故障</h3><p>0：没有，1：有</p><p>该位的另一种表述是在当前cycle或者上一个cycle中是否检测到故障（因为如果上一个cycle没有检测到且当前cycle也还没有检测到，那么bit 2应该是0），和bit 1的置1条件相同，测试失败就会置1，但是bit 2在进入新的cycle之后不会清零，只有在cycle完成且测试完成且没有检测到故障时才会置零。</p><h3 id="bit-3，confirmed，故障是否确认"><a href="#bit-3，confirmed，故障是否确认" class="headerlink" title="bit 3，confirmed，故障是否确认"></a>bit 3，confirmed，故障是否确认</h3><p>0：没有确认，1：确认了</p><p>故障的确认是指故障发生的次数超过设定的阈值，对于non-OBD（OBD和non-OBD是指控制器负责的部件是否与车辆排放相关，常见的OBD控制器有发动机控制器，变速箱控制器等）的控制器，这个值是1，那么在这种情况下，当DTC pending的时候，也就相当于confirmed了。</p><h3 id="bit-4，testNotCompletedSinceLastClear，清除DTC之后，是否完成过故障检测"><a href="#bit-4，testNotCompletedSinceLastClear，清除DTC之后，是否完成过故障检测" class="headerlink" title="bit 4，testNotCompletedSinceLastClear，清除DTC之后，是否完成过故障检测"></a>bit 4，testNotCompletedSinceLastClear，清除DTC之后，是否完成过故障检测</h3><p>0：完成了，1：没有完成</p><p>bit 4 到 bit 7都比较容易理解。</p><h3 id="bit-5，testFailedSinceLastClear，清除DTC之后，故障检测是否失败"><a href="#bit-5，testFailedSinceLastClear，清除DTC之后，故障检测是否失败" class="headerlink" title="bit 5，testFailedSinceLastClear，清除DTC之后，故障检测是否失败"></a>bit 5，testFailedSinceLastClear，清除DTC之后，故障检测是否失败</h3><p>0：没有失败，1：失败过</p><p>注意0的情况下，也可能是故障检测没有完成。</p><h3 id="bit-6，testNotCompletedThisOperationCycle，当前循环，是否完成过故障检测"><a href="#bit-6，testNotCompletedThisOperationCycle，当前循环，是否完成过故障检测" class="headerlink" title="bit 6，testNotCompletedThisOperationCycle，当前循环，是否完成过故障检测"></a>bit 6，testNotCompletedThisOperationCycle，当前循环，是否完成过故障检测</h3><p>0：完成了，1：没有完成</p><h3 id="bit-7，warningIndicatorRequested，ECU是否请求点亮警告灯"><a href="#bit-7，warningIndicatorRequested，ECU是否请求点亮警告灯" class="headerlink" title="bit 7，warningIndicatorRequested，ECU是否请求点亮警告灯"></a>bit 7，warningIndicatorRequested，ECU是否请求点亮警告灯</h3><p>0：没有请求，1：请求了</p><p>该位是否置1在于，整车厂在设计时，已经确定了每个DTC在被触发时是否会亮起警告灯，亮哪一个警告灯，以及故障提示的内容。如果某个DTC没有设计为会触发亮灯，那么这个DTC被触发时，bit 7也应该始终为0。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h2><p>对照上图，试着推断几个实际的故障码的状态位。</p><blockquote><p>00100111(最左边是bit 7)</p></blockquote><p>bit 7，没有对应的故障警告灯显示</p><p>bit 6，当前循环完成了故障检测</p><p>bit 5，清除DTC之后故障检测失败过</p><p>bit 4，清除DTC之后故障检测完成过</p><p>bit 3，故障没有确认（这里说明这个DTC要求的确认阈值是大于1的）</p><p>bit 2，当前cycle或上一个cycle检测到了故障</p><p>bit 1，当前cycle检测到故障</p><p>bit 0，上一次检测中检测到了故障</p><blockquote><p>00101111(最左边是bit 7)</p></blockquote><p>与上一个DTC的状态位，只有bit 3有区别。</p><p>bit 3，故障确认了。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/14/hello-world/"/>
      <url>/2024/03/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
